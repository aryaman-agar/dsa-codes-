Here’s a list of the most commonly used STL functions in C++:

1. Vector
	•	push_back(value) – Adds an element at the end.
	•	pop_back() – Removes the last element.
	•	size() – Returns the number of elements.
	•	empty() – Checks if the vector is empty.
	•	front() – Returns the first element.
	•	back() – Returns the last element.
	•	begin() – Returns an iterator pointing to the first element.
	•	end() – Returns an iterator pointing to one past the last element.
	•	erase(iterator) – Removes an element at the specified position.
	•	insert(iterator, value) – Inserts an element at the specified position.
	•	clear() – Removes all elements.
	•	sort() – Sorts the vector (requires <algorithm>).

2. String
	•	length() or size() – Returns the number of characters in the string.
	•	substr(start, length) – Returns a substring.
	•	find(substring) – Finds the first occurrence of a substring.
	•	compare(string) – Compares two strings.
	•	append(string) – Appends a string to the current string.
	•	replace(pos, len, str) – Replaces a portion of the string.
	•	erase(pos, len) – Removes characters from a string.
	•	insert(pos, str) – Inserts a string at a specific position.

3. Set
	•	insert(value) – Adds a value to the set.
	•	erase(value) – Removes a value from the set.
	•	find(value) – Searches for a value and returns an iterator to it.
	•	size() – Returns the number of elements in the set.
	•	empty() – Checks if the set is empty.
	•	clear() – Removes all elements.
	•	count(value) – Returns 1 if the value exists, otherwise 0.

4. Map
	•	insert(pair) – Adds a key-value pair.
	•	erase(key) – Removes a key-value pair by the key.
	•	find(key) – Searches for a key and returns an iterator to it.
	•	at(key) – Returns the value for a given key.
	•	size() – Returns the number of elements in the map.
	•	empty() – Checks if the map is empty.
	•	clear() – Removes all key-value pairs.
	•	count(key) – Checks if a key exists (1 if true, otherwise 0).

5. Queue
	•	push(value) – Adds an element to the back.
	•	pop() – Removes an element from the front.
	•	front() – Returns the front element.
	•	back() – Returns the back element.
	•	size() – Returns the number of elements.
	•	empty() – Checks if the queue is empty.

6. Stack
	•	push(value) – Adds an element to the top.
	•	pop() – Removes the top element.
	•	top() – Returns the top element.
	•	size() – Returns the number of elements.
	•	empty() – Checks if the stack is empty.

7. Priority Queue
	•	push(value) – Adds an element to the queue.
	•	pop() – Removes the largest element.
	•	top() – Returns the largest element.
	•	size() – Returns the number of elements.
	•	empty() – Checks if the queue is empty.

8. Algorithms (from <algorithm> header)
	•	sort(start, end) – Sorts elements in a range.
	•	reverse(start, end) – Reverses elements in a range.
	•	max(a, b) – Returns the maximum of two elements.
	•	min(a, b) – Returns the minimum of two elements.
	•	accumulate(start, end, initial) – Computes the sum of elements (requires <numeric>).
	•	binary_search(start, end, value) – Checks if a value exists in a sorted range.
	•	lower_bound(start, end, value) – Returns the first position where value can be inserted to maintain sorted order.
	•	upper_bound(start, end, value) – Returns the first position after value in sorted order.

9. Deque
	•	push_back(value) – Adds an element at the end.
	•	push_front(value) – Adds an element at the beginning.
	•	pop_back() – Removes the last element.
	•	pop_front() – Removes the first element.
	•	front() – Returns the first element.
	•	back() – Returns the last element.

10. Bitset (for bit manipulation)
	•	set(pos) – Sets the bit at position pos to 1.
	•	reset(pos) – Sets the bit at position pos to 0.
	•	flip(pos) – Toggles the bit at position pos.
	•	count() – Returns the number of set bits.
	•	size() – Returns the number of bits.

These functions cover a wide range of commonly used operations in competitive programming and software development. Let me know if you want detailed examples for any of these!
